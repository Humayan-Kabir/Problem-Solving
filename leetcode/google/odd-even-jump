class Solution {
public:
    int oddEvenJumps(vector<int>& arr) {
  		int n = arr.size();
  		vector<vector<int>> dp(n + 1, vector<int>(2, 0));
  		map<int,int> mapping;
  		mapping[arr[n - 1]] = n - 1;
  		dp[n - 1] = {1, 1};
  		int ans = 1;
  		auto findNextPositon = [&](int curpos) -> pair<int,int> {
  			auto it = mapping.lower_bound(arr[curpos]);
			int next[2];
  			if (it == mapping.end()) {
  				next[0] = n;
  				next[1] = (--it)->second;
  			} else {
  				next[0] = it->second;
  				if (it->first == arr[curpos]) {
  					next[1] = it->second;
  				} else if (it != mapping.begin()) {
  					next[1] = (--it)->second;
  				} else {
  					next[1] = n;
  				} 
  			}
  			return { next[0], next[1] };
  		};
  		for(int i = n - 2; i >= 0; i--) {
  			auto next = findNextPositon(i);
  			dp[i][0] = dp[next.first][1];
  			dp[i][1] = dp[next.second][0];
  			ans += dp[i][0];
            mapping[arr[i]] = i; 
  		}
  		return ans;      
    }
};
