/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* getForest(TreeNode* node, unordered_set<int> &deleted, vector<TreeNode*> &forest) {
        if(!node) {
            return nullptr;
        }
        node->left = getForest(node->left, deleted, forest);
        node->right = getForest(node->right, deleted, forest);
        if(deleted.find(node->val) != deleted.end()) {
            if(node->left) {
                forest.push_back(node->left);
            } 
            if(node->right) {
                forest.push_back(node->right);
            }
            return nullptr;
        }
        return node;
    }
public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        unordered_set<int> deleted(to_delete.begin(), to_delete.end());
        vector<TreeNode*> forest;
        root = getForest(root, deleted, forest);
        if(root) {
            forest.push_back(root);
        }
        return forest;
    }
};
