/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private: 
	struct Compare {
		bool operator()(ListNode* left, ListNode* right) {
			return left->val > right->val;
		}	
	};
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
  		priority_queue<ListNode*, vector<ListNode*>, Compare> pq;
  		ListNode* sorted = new ListNode(-1);
		ListNode* current = sorted;
  		for(ListNode* node: lists) {
            if (node) {
  			    pq.push(node);
            }
  		}	      
  		while(!pq.empty()) {
  			ListNode* node = pq.top();
			pq.pop();
  			current->next = node;
            current = current->next;
  			if (node->next) {
  				pq.push(node->next);
  			}
  		}
  		return sorted->next;
    }
};
