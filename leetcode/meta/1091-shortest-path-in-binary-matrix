class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int dx[] = {0, 0, 1, -1, 1, -1, 1, -1};
        int dy[] = {1, -1, 0, 0, 1, 1, -1, -1};
        int n = grid.size();
        if (grid[0][0] != 0) {
            return -1;
        }
        if (n == 1) {
            return 1;
        }
        queue<pair<int,int>> q;
        grid[0][0] = 1;
        q.push({0, 0});
        while(!q.empty()) {
            auto cur = q.front();
            q.pop();
            for(int i = 0; i < 8; i++) {
                int x = cur.first + dx[i];
                int y = cur.second + dy[i];
                if (x < 0 || x >= n || y < 0 || y >= n || grid[x][y]) {
                    continue;
                }
                grid[x][y] = grid[cur.first][cur.second] + 1;
                q.push({x, y});
                if (x == n - 1 && y == n - 1) {
                    return grid[x][y];
                }
            }
        }
        return -1;
    }
};
