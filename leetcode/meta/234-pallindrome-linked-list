/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == nullptr || head->next == nullptr) {
            return true;
        }
        ListNode *firstHalfEnd = getFirstHalfEnd(head);
        ListNode *secondHalfStart = reverse(firstHalfEnd->next);
        ListNode* p1 = head;
        ListNode* p2 = secondHalfStart;
        while(p1 && p2) {
            if(p1->val != p2->val) {
                return false;
            }
            p1 = p1->next;
            p2 = p2->next;
        }
        firstHalfEnd->next = reverse(secondHalfStart);
        return true;
    }
    ListNode *reverse(ListNode* head) {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        while(curr) {
            ListNode *nextNode = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextNode;  
        }
        return prev;
    }
    ListNode* getFirstHalfEnd(ListNode* head) {
        ListNode *slow = head;
        ListNode *fast = head;
        while(fast->next && fast->next->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
};
