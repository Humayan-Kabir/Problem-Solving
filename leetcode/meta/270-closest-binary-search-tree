/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void findClosest(TreeNode* node, int &closest, double &diff, double target) {
        if (!node) {
            return;
        }
        double delta = abs(target - node->val);
        if (delta < diff || (delta == diff && closest > node->val)) {
            diff = delta;
            closest = node->val;
        } 
        if (node->val > target) { 
            findClosest(node->left, closest, diff, target);
        } else if (node->val < target) {
            findClosest(node->right, closest, diff, target);
        }
    }
public:
    int closestValue(TreeNode* root, double target) {
        int closest;
        double diff = 3e9;
        findClosest(root, closest, diff, target);
        return closest;
    }
};
//   4
//  2 5
// 1,3
