class Solution {
private: 
    void backtrack(int pos, long long current, long long last, long long target, vector<string> &ans, string &num, string path) {
        if (pos == num.size()) {
            if (current == target) {
                ans.push_back(path);
            }
            return;
        }
        long long delta = 0;
        for(int i = pos; i < num.size(); i++) {
            delta = delta * 10 + num[i] - '0'; 
            if (i > pos && num[pos] == '0') {
                break;
            }
            if (pos == 0) {
                backtrack(i + 1, current + delta, delta, target, ans, num, path + to_string(delta));
                continue;
            }
            backtrack(i + 1, current + delta, delta, target, ans, num, path + "+" + to_string(delta));
            backtrack(i + 1, current - delta, -delta, target, ans, num, path + "-" + to_string(delta));
            backtrack(i + 1, current - last + last * delta, last * delta, target, ans, num, path + "*" + to_string(delta));
        }
    }
public:
    vector<string> addOperators(string num, int target) {
        int n = num.size();
        vector<string> ans;
        backtrack(0, 0, 0, target, ans, num, "");
        return ans;
    }
};
