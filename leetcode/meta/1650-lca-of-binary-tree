/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* parent;
};
*/

class Solution {
public:
    Node* lowestCommonAncestor(Node* p, Node * q) {
  		unordered_set<Node*> nodes;
  		while(p) {
  			nodes.insert(p);
  			p = p->parent;
  		}
  		while(q) {
  			if (nodes.find(q) != nodes.end()) {
  				return q;
  			}
  			q = q->parent;
  		}      
  		return nullptr;
    }
};

class Solution {
public:
    Node* lowestCommonAncestor(Node* p, Node * q) {
  		Node* p1 = p;
  		Node* p2 = q;
  		while(p1 != p2) {
  			p1 = p1->parent ? p1->parent : q;
  			p2 = p2->parent ? p2->parent : p;
  		}      
  		return p1;
    }
};
